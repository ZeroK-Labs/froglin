import { createPXEClient, Fr } from "@aztec/aztec.js";

import AccountWithContracts from "common/types/AccountWithContracts";
import { createPXEService, destroyPXEService } from "common/utils/PXEManager";
import { createWallet } from "common/utils/WalletManager";

export const GAME_MASTER = {
  secret: "123",
  contracts: {},
} as const as AccountWithContracts;

export const ACCOUNTS: { [key: string]: AccountWithContracts } = {
  alice: { secret: "0x123", contracts: {} } as const as AccountWithContracts,
  bob: { secret: "0x457", contracts: {} } as const as AccountWithContracts,
  charlie: { secret: "0x789", contracts: {} } as const as AccountWithContracts,
} as const;

function createPXE(): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    const [port, _pxe] = createPXEService(
      () => resolve(`http://localhost:${port}`),
      (code) => reject(`PXE process exited with code ${code}`),
    );
  });
}

async function createPXEWallet(account: AccountWithContracts) {
  account.pxe_url = await createPXE(); // GAME_MASTER.pxe_url;
  account.pxe = createPXEClient(account.pxe_url);
  account.wallet = await createWallet(account.secret, account.pxe);
}

export async function createAccounts() {
  console.log("Creating deployment account in default PXE...");

  GAME_MASTER.pxe_url = process.env.SANDBOX_URL!;
  GAME_MASTER.pxe = createPXEClient(GAME_MASTER.pxe_url);
  GAME_MASTER.wallet = await createWallet(GAME_MASTER.secret, GAME_MASTER.pxe);

  console.log("Spawning PXEs and creating test accounts...");

  await Promise.all(Object.values(ACCOUNTS).map((account) => createPXEWallet(account)));
}

export function destroyAccounts() {
  for (const name in ACCOUNTS) {
    const port = Number(ACCOUNTS[name].pxe_url.split(":")[2]);
    destroyPXEService(port);
  }
}

// TODO: review code below, possibly redesign private note issuance
//       using a shared key generated by CA -- the GAME_MASTER

export async function registerAccounts() {
  console.log("Distributing accounts in PXE network...");

  const promises: Promise<any>[] = [];
  const accounts = Object.values(ACCOUNTS);

  for (let i = 0; i !== accounts.length; ++i) {
    const account = accounts[i];

    // register current account in GAME_MASTER's PXE
    promises.push(
      account.pxe.registerAccount(
        new Fr(BigInt(GAME_MASTER.secret)),
        GAME_MASTER.wallet.getCompleteAddress().partialAddress,
      ),
    );

    // register GAME_MASTER in current account's PXE
    promises.push(
      GAME_MASTER.pxe.registerAccount(
        new Fr(BigInt(account.secret)),
        account.wallet.getCompleteAddress().partialAddress,
      ),
    );

    // register current account in all the other accounts' PXEs
    for (let j = 0; j !== accounts.length; ++j) {
      if (j === i) continue;

      promises.push(
        accounts[j].pxe.registerAccount(
          new Fr(BigInt(account.secret)),
          account.wallet.getCompleteAddress().partialAddress,
        ),
      );
    }
  }

  await Promise.all(promises);
}
